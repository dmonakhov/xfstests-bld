#!/bin/bash
#
# This shell script must be run as root

SAVE_ARGS=("$@")

SUITE=jessie
MIRROR=http://mirrors.kernel.org/debian
DIR=$(pwd)
ROOTDIR=$DIR/rootdir
#ARCH="--arch=i386"
RAW_ROOT_FS=$DIR/root_fs.raw
ROOT_FS=$DIR/root_fs.img
COMPAT="-o compat=0.10"
SAVE_RAW_ROOT=no
DO_GCE=no
DO_UPDATE=no
DO_NETWORKING=no

if test -r config.custom ; then
   . $(pwd)/config.custom
fi

while [ "$1" != "" ]; do
  case $1 in
    --save_raw_root)
      SAVE_RAW_ROOT=yes;
      ;;
    --suite) shift
      SUITE=$1
      ;;
    --mirror) shift
      MIRROR=$1
      ;;
    --networking)
      DO_NETWORKING=yes;
      ;;
    --update)
      DO_UPDATE=yes
      ;;
    --pause)
      PAUSE_DEBUG=yes
      ;;
    --out_tar|--out-tar)
      OUT_TAR="$DIR/root_fs.tar.gz"
      ;;
    --out_tar=*|--out-tar=*)
      OUT_TAR="$(echo $1 | sed 's/--out[-_]tar=//')"
      ;;
    --log)
      DO_LOG="$DIR/gen-image.log"
      ;;
    --log=*)
      DO_LOG="$(echo $1 | sed 's/--log=//')"
      ;;
    -a|--add_packages) shift
      PACKAGES="$PACKAGES $1"
      ;;
    *)
      echo "usage: gen-image [--save_raw_root] [--update] [--mirror MIRROR_LOC]"
      echo "                 [-a|--add_packages packages] [--networking] "
      echo "                 [--suite SUITE] [--out_tar DIR]"
      exit 1
      ;;
  esac
  shift
done

if test -n "$DO_LOG" ; then
    if test -z "$GEN_IMAGE_LOG" ; then
	export GEN_IMAGE_LOG="$DO_LOG"
	set -- "${SAVE_ARGS[@]}"
	exec script -c "$0 $*" "$DO_LOG"
    fi
fi

if test -n "$OUT_TAR" ; then
    if test "$FAKECHROOT" != "true" ; then
	set -- "${SAVE_ARGS[@]}"
	exec fakechroot $0 "$@"
    fi
    if test -z "$FAKEROOTKEY" ; then
	set -- "${SAVE_ARGS[@]}"
	exec fakeroot $0 "$@"
    fi
    PATH="/sbin:/usr/sbin:$PATH"
else
    if test "$EUID" -ne 0 ; then
	echo "You must run this script as root (or use --out_tar)"
	exit 1;
    fi
fi

LIBSSL=$(apt-cache depends libssl-dev | grep 'Depends: libssl1' |\
		awk '{print $2};')
if test $DO_NETWORKING = "yes"; then
    PACKAGES="$PACKAGES $(cat net-packages)"
fi
PACKAGES="$PACKAGES $(cat xfstests-packages) $LIBSSL"
PACKAGES=$(echo $PACKAGES | sed 's/ /,/g')
case $PACKAGES in
     apt,*|*,apt,*|*,apt)	EXCLUDE="" ;;
     *)				EXCLUDE="--exclude=apt"
esac

if test $(df -k /tmp | tail -1 | awk '{print $4}') -gt 350000
then
    RAW_ROOT_FS=/tmp/root_fs.raw.$$
fi

update_xfstests()
{
   tar -C $ROOTDIR/root -xf ../../xfstests.tar.gz
   rsync --exclude-from kvm-exclude-files -avH files/* $ROOTDIR
   rsync -avH ../../xfstests/git-versions $ROOTDIR/root/xfstests
   chown -R root:root $ROOTDIR/root
}

fix_symlinks()
{
    if test -n "$OUT_TAR"; then
	symlinks -crd rootdir
    fi
}

finalize_rootfs()
{
   e2fsck -fyD $RAW_ROOT_FS
   e2fsck -fy -E discard $RAW_ROOT_FS
   qemu-img convert -f raw -O qcow2 $COMPAT -c $RAW_ROOT_FS $ROOT_FS
}

cleanup_rootdir()
{
    if test -z "$OUT_TAR"; then
	if test -d $ROOTDIR ; then
	    umount $ROOTDIR/var/cache/apt/archives
	    umount $ROOTDIR/var/lib/apt/lists
	    for i in debs imgdir ;
	    do
		umount $ROOTDIR/$i
		rmdir $ROOTDIR/$i
	    done
	    umount $ROOTDIR
	    rmdir $ROOTDIR
	fi
    else
	if test "$SAVE_RAW_ROOT" = "yes" ; then
	    echo "Raw root directory has been saved at" $ROOTDIR
	else
	    rm -rf $ROOTDIR
	fi
    fi
}

cleanup_on_abort()
{
    cleanup_rootdir
    rm -f "$RAW_ROOT_FS"
    trap - INT TERM
}

mkdir -p $ROOTDIR
if test $DO_UPDATE = "yes" ; then
   qemu-img convert -f qcow2 -O raw $ROOT_FS $RAW_ROOT_FS
   mount -t ext4 -o loop $RAW_ROOT_FS $ROOTDIR
   rm -rf $ROOTDIR/xfstests
   update_xfstests
   umount $ROOTDIR
   rmdir $ROOTDIR
   finalize_rootfs
   exit 0
fi

mkdir -p var.cache.apt.archives
mkdir -p var.lib.apt.lists
mkdir -p debs
if test -z "$OUT_TAR"; then
   cp /dev/null $RAW_ROOT_FS
   mke2fs -t ext4 -O ^has_journal -Fq $RAW_ROOT_FS 1g
   mount -t ext4 -o loop $RAW_ROOT_FS $ROOTDIR
fi
mkdir -p $ROOTDIR/var/cache/apt/archives
mkdir -p $ROOTDIR/var/lib/apt/lists
mkdir -p $ROOTDIR/debs
mkdir -p $ROOTDIR/imgdir
if test -z "$OUT_TAR"; then
   mount --bind var.cache.apt.archives $ROOTDIR/var/cache/apt/archives
   mount --bind var.lib.apt.lists $ROOTDIR/var/lib/apt/lists
   mount --bind debs $ROOTDIR/debs
   mount --bind $(dirname $RAW_ROOT_FS) $ROOTDIR/imgdir
else
   ln var.cache.apt.archives/* $ROOTDIR/var/cache/apt/archives
   ln var.lib.apt.lists/* $ROOTDIR/var/lib/apt/lists
   ln debs/* $ROOTDIR/debs
   export FAKECHROOT_CMD_SUBST=/usr/bin/chfn=/bin/true
fi
trap cleanup_on_abort INT TERM
debootstrap --variant=minbase --include=$PACKAGES $EXCLUDE $ARCH $SUITE $ROOTDIR $MIRROR $DIR/debootstrap.script
if test $? -ne 0 ; then
    echo "Deboostrap failed, aborting."
    cleanup_on_abort
    exit 1
fi
update_xfstests
for i in vda vdb vdc vdd vde vdf results
do
	mkdir $ROOTDIR/$i
done

echo "fsgqa:x:31415:31415:fsgqa user:/home/fsgqa:/bin/bash" >> $ROOTDIR/etc/passwd
echo "fsgqa:!::0:99999:7:::" >> $ROOTDIR/etc/shadow
echo "fsgqa:x:31415:" >> $ROOTDIR/etc/group
echo "fsgqa:!::" >> $ROOTDIR/etc/gshadow
mkdir $ROOTDIR/home/fsgqa
chown 31415:31415 $ROOTDIR/home/fsgqa
chmod 755 $ROOTDIR/root
fix_symlinks

DEBS=$(find debs -name \*.deb)
if test -n "$DEBS"
then
    chroot $ROOTDIR dpkg --ignore-depends=e2fsprogs -i $DEBS
fi

cp $ROOTDIR/lib/systemd/system/serial-getty@.service \
	$ROOTDIR/etc/systemd/system/telnet-getty@.service
sed -i -e '/ExecStart/s/agetty/agetty -a root/' \
    -e 's/After=rc.local.service/After=kvm-xfstests.service/' \
	$ROOTDIR/lib/systemd/system/serial-getty@.service
sed -i -e '/ExecStart/s/agetty/agetty -a root/' \
    -e 's/After=rc.local.service/After=network.target/' \
	$ROOTDIR/etc/systemd/system/telnet-getty@.service
chroot $ROOTDIR dpkg --purge gcc-4.7-base gcc-4.8-base
chroot $ROOTDIR systemctl enable kvm-xfstests.service
chroot $ROOTDIR systemctl enable telnet-getty@ttyS1.service
chroot $ROOTDIR systemctl enable telnet-getty@ttyS2.service
chroot $ROOTDIR systemctl enable telnet-getty@ttyS3.service
find $ROOTDIR/usr/share/doc -type f | grep -v copyright | xargs rm
find $ROOTDIR/usr/share/doc -mindepth 2 -type l | xargs rm
find $ROOTDIR/usr/share/doc -type d | xargs rmdir --ignore-fail-on-non-empty -p
rm -rf $ROOTDIR/usr/share/man
find $ROOTDIR/var/log -type f | xargs rm
if test -n "$OUT_TAR"; then
    rm -f $ROOTDIR/dev $ROOTDIR/proc
    mkdir $ROOTDIR/dev $ROOTDIR/proc
    mknod -m 622 $ROOTDIR/dev/console c 5 1
    mknod -m 666 $ROOTDIR/dev/null c 1 3
    mknod -m 666 $ROOTDIR/dev/zero c 1 5
    mknod -m 666 $ROOTDIR/dev/ptmx c 5 2
    mknod -m 666 $ROOTDIR/dev/tty c 5 0
    mknod -m 444 $ROOTDIR/dev/random c 1 8
    mknod -m 444 $ROOTDIR/dev/urandom c 1 9
    chown root:tty $ROOTDIR/dev/{console,ptmx,tty}
    if test "$(uname -m)" = x86_64 ; then
	rm $ROOTDIR/lib64/ld-linux-x86-64.so.2
	mkdir -p $ROOTDIR/lib64
	ln -s /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 $ROOTDIR/lib64/
    fi
    if test -f $ROOTDIR/sbin/ldconfig.REAL ; then
	mv $ROOTDIR/sbin/ldconfig.REAL $ROOTDIR/sbin/ldconfig
	ed $ROOTDIR/var/lib/dpkg/diversions <<EOF > /dev/null 2>&1
/^\/sbin\/ldconfig.REAL$/
.-1,.+1d
wq
EOF
    fi
    if test -f $ROOTDIR/usr/bin/ldd.REAL ; then
	mv $ROOTDIR/usr/bin/ldd.REAL $ROOTDIR/usr/bin/ldd
	ed $ROOTDIR/var/lib/dpkg/diversions <<EOF > /dev/null 2>&1
/^\/usr\/bin\/ldd.REAL$/
.-1,.+1d
wq
EOF
    fi
fi

if test -n "$PAUSE_DEBUG"
then
    ${SHELL:-/bin/sh}
fi

rm -rf $ROOTDIR/var/cache/apt/archives/partial \
	$ROOTDIR/var/lib/apt/lists/partial
if test -n "$OUT_TAR"; then
    (cd $ROOTDIR/var/cache/apt/archives ; \
     for i in * ; do \
	 if test ! -f $DIR/var.cache.apt.archives/$i ; then \
	     echo caching $i ; \
	     ln $i $DIR/var.cache.apt.archives/ ; \
	 fi ; \
     done)
    (cd $ROOTDIR/var/lib/apt/lists ; \
     for i in * ; do \
	 if test ! -f $DIR/var.lib.apt.lists/$i ; then \
	     echo caching $i ; \
	     ln $i $DIR/var.lib.apt.lists/ ; \
	 fi ; \
     done)
    find $ROOTDIR/var/cache/apt/archives $ROOTDIR/var/lib/apt/lists \
	 $ROOTDIR/debs -type f | xargs rm
    rmdir $ROOTDIR/debs
    rmdir $ROOTDIR/imgdir
    case "$OUT_TAR" in
	*.gz)	ZFLAG="-z" ;;
	*)	ZFLAG="" ;
    esac
    fix_symlinks
    tar -C $ROOTDIR -c $ZFLAG -f "$OUT_TAR" .
    cleanup_rootdir
    exit 0
fi

trap - INT TERM
cleanup_rootdir
tune2fs -O has_journal $RAW_ROOT_FS
finalize_rootfs

if test "$SAVE_RAW_ROOT" = "yes" ; then
  echo "Raw root image has been saved at" $RAW_ROOT_FS
else
  rm -f $RAW_ROOT_FS
fi
