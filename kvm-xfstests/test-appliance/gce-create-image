#!/bin/bash

GCE_XFSTESTS=yes
DIR=..
if test -n "$GCE_XFSTESTS_DIR"
then
    DIR="$GCE_XFSTESTS_DIR"
fi
. "$DIR/util/get-config"

if test -r config.custom ; then
   . ./config.custom
fi

if test -z "$GS_BUCKET" -o -z "$GCE_PROJECT" -o -z "$GCE_ZONE"
then
	echo "You must configure GS_BUCKET, GCE_PROJECT, and GCE_ZONE in"
	echo "your config file"
	exit 1
fi

cd "$DIR/test-appliance"

GS_RW=https://www.googleapis.com/auth/devstorage.read_write
GS_RO=https://www.googleapis.com/auth/devstorage.read_only
LOG_WR=https://www.googleapis.com/auth/logging.write
COMPUTE_RW=https://www.googleapis.com/auth/compute
DATECODE=$(date +%Y%m%d%H%M)

SCOPES="$GS_RW,$LOG_WR,$COMPUTE_RW"

ROOT_FS=xfstests
BLD_INST=xfstests-bld
BLD_DISK=xfstests-bld
IMAGE_FAMILY=debian-8
IMAGE_PROJECT=debian-cloud
GS_TAR="gs://$GS_BUCKET/gce-xfstests.image.tar.gz"
TARBALL=../../xfstests.tar.gz
type pigz &>/dev/null && GZIP=pigz || GZIP=gzip

if ! test -f $TARBALL ; then
   echo $TARBALL does not exist!
   exit 1
fi

while [ "$1" != "" ];
do
    case $1 in
	-I) shift
	    ROOT_FS="$1"
	    BLD_INST="xfstests-bld-$1"
	    BLD_DISK="xfstests-bld-$1"
	    GS_TAR="gs://$GS_BUCKET/gce-xfstests-$1.image.tar.gz"
	    ;;
	*)
	    echo "unknown option: $1"
	    exit 1
	    ;;
    esac
    shift
done

GS_SCRIPT=gs://$GS_BUCKET/gce-xfstests-bld.sh
GS_TARBALL=gs://$GS_BUCKET/xfstests.tar.gz
METADATA="startup-script-url=$GS_SCRIPT"
GCE_MACHTYPE=n1-standard-1

LOCAL_HASH=$(gsutil hash $TARBALL 2> /dev/null |  grep "Hash (md5)" | awk '{print $3}')
REMOTE_HASH=$(gsutil stat $GS_TARBALL 2> /dev/null | grep "Hash (md5)" | awk '{print $3}')
if test "$LOCAL_HASH" != "$REMOTE_HASH"
then
	gsutil cp $TARBALL $GS_TARBALL
fi

t=$(mktemp /tmp/gce-create.XXXXXXXX)

sed -e "s/@BUCKET@/$GS_BUCKET/" \
    -e "s;@GS_TAR@;$GS_TAR;" \
    -e "s/@BLD_INST@/$BLD_INST/" < gce-xfstests-bld.sh > $t
gsutil cp $t gs://$GS_BUCKET/gce-xfstests-bld.sh

# Update the git-versions file
if test -d ../../xfstests
then
    echo "xfstests-bld	$(git describe --always --dirty) ($(git log -1 --pretty=%cD))" \
	 > ../../xfstests-bld.ver
    cat ../../*.ver > files/root/xfstests/git-versions
fi

tar -X gce-exclude-files -C files -cf - . | $GZIP -9n > $t
GS_FILES_TARBALL=gs://$GS_BUCKET/files.tar.gz

LOCAL_HASH=$(gsutil hash $t 2> /dev/null |  grep "Hash (md5)" | awk '{print $3}')
REMOTE_HASH=$(gsutil stat $GS_FILES_TARBALL 2> /dev/null | grep "Hash (md5)" | awk '{print $3}')
if test "$LOCAL_HASH" != "$REMOTE_HASH"
then
	gsutil cp $t $GS_FILES_TARBALL
fi
rm -f $t

gcloud compute --project "$GCE_PROJECT" -q instances delete "$BLD_INST" \
       --zone "$GCE_ZONE" 2> /dev/null
gcloud compute --project "$GCE_PROJECT" -q disks delete "$BLD_DISK" 2> /dev/null

gcloud compute --project "$GCE_PROJECT" instances create "$BLD_INST" \
       --zone "$GCE_ZONE" --machine-type $GCE_MACHTYPE \
       --network "default" --metadata "^ ^$METADATA" \
       --maintenance-policy "MIGRATE" --scopes "$SCOPES" \
       --image-family "$IMAGE_FAMILY" --image-project "$IMAGE_PROJECT" \
       --boot-disk-type "pd-standard" --boot-disk-device-name "$BLD_DISK"

echo -n "Waiting for bootable image setup."

cnt=0
while gcloud compute --project "$GCE_PROJECT" instances \
	     describe "$BLD_INST" --zone $GCE_ZONE >& /dev/null
do
    let cnt=$cnt+1
    if test $cnt -ge 10
    then
	echo -n "."
	cnt=0
    fi
    sleep 1
done
echo " Done!"

echo "Creating new image $ROOT_FS-$DATECODE"
gcloud compute --project "$GCE_PROJECT" -q images create "$ROOT_FS-$DATECODE" \
	--description "Linux Kernel File System Test Appliance" \
	--source-disk "$BLD_DISK" --source-disk-zone "$GCE_ZONE" \
	--family "$ROOT_FS"
gcloud compute --project "$GCE_PROJECT" -q disks delete "$BLD_DISK" \
	--zone "$GCE_ZONE" >& /dev/null &
gcloud compute --project "$GCE_PROJECT" -q images list --filter="family=$ROOT_FS"
