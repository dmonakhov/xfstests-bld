#!/bin/bash

FSTESTCFG=all
SNAPSHOT=",snapshot=on"
DO_AEX="yes"
API="1.3"

print_help ()
{
    PROG=$(basename "$0")
    echo "Usage: $PROG [<OPTIONS>] smoke|full"
    echo "Usage: $PROG [<OPTIONS>] <test> ..."
    echo "Usage: $PROG [<OPTIONS>] -g <group> ..."
    echo "Usage: $PROG [<OPTIONS>] shell|maint"
    echo ""
    echo "Common options are:"
    echo "	-a		- Disable auto-exclude; run all tests"
    echo "	-c config	- Specify a file system configuration"
    echo "	-C count	- Run the specified tests multiple times"
    echo "	-I image	- Use this test appliance image"
    echo "	-m mountopts	- Append mount options to fs config"
    echo "	-n nr_cpus	- Specify the number of cpu's"
    if test "$GCE_XFSTESTS" != "yes" ; then
	echo "	-N		- Enable networking (requires root)"
    fi
    echo "	-o opts		- Extra kernel command line options"
    echo "	-r ram		- Specify memory to be used in megabytes"
    echo "	-X test		- Exclude test from running"
    echo "	--no-punch	- Do not run tests w/ patch hole"
    echo "	--no-collapse	- Do not run tests w/ collapse range"
    echo "	--no-insert	- Do not run tests w/ insert range"
    echo "	--no-zero	- Do not run tests w/ zero range"
    if test "$GCE_XFSTESTS" != "yes" ; then
	echo "	--kernel file	- Boot the specified kernel"

    else
	echo "GCE speciffic commands:"
	echo "	ls-instances"
        echo "	ls|ls-instances"
        echo "	rm|rm-instances|abort|abort-instances"
        echo "	start|start-instance|start-instances"
        echo "	stop|stop-instance|stop-instances"
        echo "	ls-disks|ls-disk"
        echo "	rm-disks|rm-disk"
        echo "	ls-results|ls-gcs"
        echo "	rm-results|rm-gcs"
        echo "	get-results"
        echo "	setup"
        echo "	ssh"
        echo "	console"
        echo "	serial"
        echo "	get-results"
        echo "	create-image"
        echo "	export-image"
        echo "	import-image"
        echo "	--numa"
        echo "	--log"
        echo "	--local-ssd"
        echo "	--pmem-device"
        echo "	--machtype"
        echo "	--image-project"
        echo "	--instance-name"
        echo "	--no-virtio-rng"
    fi
    echo "Base image update commands:"
    echo "	--update-xfstests-tar"
    echo "	--update-xfstests"
    echo "	--update-files"
    echo
    echo "	--no-log	- Don't save the log file for this run"
    echo "	--no-action	- Print the command to start the VM"
    echo ""
    echo "Common file system configurations are:"
    echo "	4k 1k ext3 nojournal ext3conv metacsum dioread_nolock "
    echo "	data_journal bigalloc bigalloc_1k inline"
    echo ""
    echo "xfstest names have the form: ext4/NNN generic/NNN shared/NNN"
    echo ""
    exit 1
}

validate_test_name()
{
    case "$1" in
	btrfs*|cifs*|ext4*|generic*|shared*|udf*|xfs*) ;;
	*)
	    echo -e "Invalid test name: $1\n"
	    print_help
	    exit 1
	    ;;
    esac
}

validate_config_name()
{
    local arg="$1"
    local fs
    local cfg

    CONFDIR="$DIR/test-appliance/files/root/fs"
    if test -d "$CONFDIR"
    then
	case "$arg" in
	    */*)
		fs="${arg%%/*}"
		cfg="${arg#*/}"
		;;
	    *)
		if test -d "$CONFDIR/$arg"
		then
		    fs="$arg"
		    cfg=default
		else
		    fs="$PRIMARY_FSTYPE"
		    cfg="$arg"
		fi
		;;
	esac
	if test ! -d "$CONFDIR/$fs" ; then
	    echo -e "Invalid file system type: $fs\n"
	    print_help
	    exit 1
	fi
	. "$CONFDIR/$fs/config"
	cfg=$(test_name_alias $cfg)
	if test -f "$CONFDIR/$fs/cfg/$cfg" -o \
		-f "$CONFDIR/$fs/cfg/$cfg.list"
	then
	    return
	else
	    echo -e "Invalid config name: $arg\n"
	    print_help
	    exit 1
	fi
    fi
}

while [ "$1" != "" ]; do
    case $1 in
	-a)
	    DO_AEX=""
	    ;;
	-c) shift
	    for i in ${1//,/ }
	    do
		validate_config_name "$i"
	    done
	    FSTESTCFG="$1"
	    ;;
	-C) shift
	    FSTESTOPT="$FSTESTOPT,count,$1"
	    ;;
	-m) shift
	    MNTOPTS="$1"
	    ;;
	-r) shift
	    case "$1" in
		*[mM])
		    MEM=$(echo "$1" | sed -e 's/[mM]$//')
		    ;;
		*[gG])
		    temparg=$(echo "$1" | sed -e 's/[gG]$//')
		    MEM=$(expr "$temparg" \* 1024)
		    unset temparg
		    ;;
		*)
		    MEM="$1"
		    ;;
	    esac
	    EXPLICIT_RAM=yes
	    ;;
	-g) shift
	    FSTESTSET="$FSTESTSET,-g,$1"
	    ;;
	-h|--help|help)
	    print_help
	    ;;
	-I) shift
	    ROOT_FS="$1"
	    ;;
	-n) shift
	    NR_CPU="$1"
	    EXPLICIT_CPU=yes
	    ;;
	-o) shift
	    EXTRA_ARG=$(echo "$1" | sed -e 's/ /:/g')
	    ;;
	-v)
	    if test "$V" = "1" ; then
		QUIET=""
		V=2
	    else
		QUIET="systemd.show_status=auto systemd.log_level=crit"
		V=1
	    fi
	    ;;
	-N)
	    if test "$GCE_XFSTESTS" != "yes" ; then
		DO_NET=yes
	    else
		print_help
	    fi
	    ;;
	-X) shift
	    if test -n "$FSTESTEXC" ; then
		FSTESTEXC="$FSTESTEXC,$1"
	    else
		FSTESTEXC="$1"
	    fi
	    ;;
	--hooks)
	    if test "$GCE_XFSTESTS" = "yes"
	    then
		shift
		GCE_HOOKS="$1"
	    else
		print_help
	    fi
	    ;;
	--update-xfstests-tar)
	    UPDATE_XFSTESTS_TAR=yes
	    UPDATE_XFSTESTS=yes
	    ;;
	--update-xfstests)
	    if ! test -f "$DIR/../xfstests.tar.gz"
	    then
		echo "The xfstests.tar.gz file has not been built!"
		exit 1
	    fi
	    UPDATE_XFSTESTS=yes
	    ;;
	--update-files)
	    UPDATE_FILES=yes
	    ;;
	--numa) shift
	    if test "$GCE_XFSTESTS" = "yes"
	    then
		print_help
	    fi
	    NUMA_NUM="$1"
	    case "$NUMA_NUM" in
		''|*[!0-9]*)
		    echo "Invalid number of NUMA nodes: $NUMA_NUM"
		    exit 1
	    esac
	    ;;
	--no-action)
	    NO_ACTION="echo -e Would execute:\n\t"
	    SKIP_LOG=yes
	    ;;
	--no-punch)
	    NO_PUNCH=yes
	    ;;
	--no-collapse)
	    NO_COLLAPSE=yes
	    ;;
	--no-insert)
	    NO_INSERT=yes
	    ;;
	--no-zero)
	    NO_ZERO=yes
	    ;;
	--no-log)
	    if test "$GCE_XFSTESTS" != "yes" ; then
		SKIP_LOG=yes
	    else
		print_help
	    fi
	    ;;
	--log)
	    if test "$GCE_XFSTESTS" != "yes" ; then
		SKIP_LOG=no
	    else
		print_help
	    fi
	    ;;
	--kernel) shift
		  KERNEL="$1"
		  if test -d "$KERNEL" ; then
		      KERNEL="$KERNEL/arch/x86/boot/bzImage"
		  fi
		  OVERRIDE_KERNEL="$KERNEL"
		  ;;
	--local-ssd)
	    if test "$GCE_XFSTESTS" = "yes"
	    then
		DO_LOCAL_SSD=yes
	    else
		print_help
	    fi
	    ;;
	--pmem-device)
	    if test "$GCE_XFSTESTS" = "yes"
	    then
		PMEM_DEVICE=yes
	    else
		print_help
	    fi
	    ;;
	--machtype)
	    if test "$GCE_XFSTESTS" = "yes"
	    then
		shift
		GCE_MACHTYPE="$1"
	    else
		print_help
	    fi
	    ;;
	--image-project)
	    if test "$GCE_XFSTESTS" = "yes" ; then
		shift
		GCE_IMAGE_PROJECT="$1"
	    else
		print_help
	    fi
	    ;;
	--instance-name)
	    if test "$GCE_XFSTESTS" = "yes" ; then
		shift
		INSTANCE_NAME="$1"
	    else
		print_help
	    fi
	    ;;
	--no-virtio-rng)
	    if test "$GCE_XFSTESTS" = "yes" ; then
		print_help
	    else
		NO_VIRTIO_RNG=yes
	    fi
	    ;;
	smoke)
	    FSTESTCFG=4k
	    FSTESTSET="$FSTESTSET,-g,quick"
	    ;;
	quick)
	    FSTESTSET="$FSTESTSET,-g,quick"
	    ;;
	full)
	    FSTESTSET="$FSTESTSET,-g,auto"
	    ;;
	shell)
	    ARG="cmd=maint"
	    ;;
	maint)
	    if test "$GCE_XFSTESTS" != "yes" ; then
		ARG="cmd=maint"
		EPH="-root_ephemeral=no"
		SNAPSHOT=""
	    else
		ARG="cmd=maint"
		if test -z "$GCE_MACHTYPE"
		then
		    GCE_MACHTYPE="f1-micro"
		fi
		OVERRIDE_KERNEL="none"
	    fi
	    ;;
	ver)
	    ARG="cmd=ver"
	    ;;
	-*)
	    print_help
	    ;;
	*)
	    validate_test_name "$1"
	    FSTESTSET="$FSTESTSET,$1"
	    ;;
    esac
    shift
done

if test -z "$FSTESTSET" -a -z "$ARG"
then
    echo -e "No tests specified!\n"
    print_help
    exit 1
fi

if test "$ARG" = "cmd=maint" -a -z "$SKIP_LOG" ; then
  SKIP_LOG=yes
fi

if test "$ARG" = "cmd=ver" -a -z "$SKIP_LOG" ; then
  SKIP_LOG=yes
fi

if test "$DO_AEX" = yes ; then
    FSTESTOPT="$FSTESTOPT,aex"
fi

if test "$NO_PUNCH" = yes ; then
    FSTESTOPT="$FSTESTOPT,no_punch"
fi

if test "$NO_COLLAPSE" = yes ; then
    FSTESTOPT="$FSTESTOPT,no_collapse"
fi

if test "$NO_INSERT" = yes ; then
    FSTESTOPT="$FSTESTOPT,no_insert"
fi

if test "$NO_ZERO" = yes ; then
    FSTESTOPT="$FSTESTOPT,no_zero"
fi

if test -d "$KERNEL" ; then
    KERNEL="$KERNEL/arch/x86/boot/bzImage"
fi

FSTESTOPT=${FSTESTOPT/#,/}

if test "$SKIP_LOG" = no ; then
   unset SKIP_LOG
fi

if test -n "$ARG" ; then
  :
elif test -n "$FSTESTSET"; then
     FSTESTSET=${FSTESTSET/#,/}
     ARG="fstestcfg=$FSTESTCFG fstestset=$FSTESTSET fstestopt=$FSTESTOPT"
fi
if test -n "$FSTESTEXC" ; then
    ARG="$ARG fstestexc=$FSTESTEXC"
fi

if test -n "$MNTOPTS" ; then
    ARG="$ARG mount_opts=$MNTOPTS"
fi

if test -n "$TZ" ; then
    ARG="$ARG fstesttz=$TZ"
fi

if test -n "$UPDATE_XFSTESTS_TAR" ; then
    (cd $DIR/.. ; ./gen-tarball --fast)
fi

case "$FSTESTCFG" in
    dax|dax,*|*,dax,*|*,dax)
	PMEM_DEVICE=yes
	;;
esac

if test -n "$PMEM_DEVICE" ; then
    if test -n "$EXTRA_ARG" ; then
	EXTRA_ARG="$EXTRA_ARG:"
    fi
    EXTRA_ARG="${EXTRA_ARG}"'memmap=4G!9G:memmap=9G!14G'
    if test -z "$EXPLICIT_RAM" -a -z "$GCE_MACHTYPE"; then
	MEM=26624
	NR_CPU=4
	EXPLICIT_RAM=yes
	EXPLICIT_CPU=yes
    elif test "$MEM" -lt 14436 ; then
	MEM=14436
    fi
fi

if test -n "$NUMA_NUM" ; then
    if test "$NUMA_NUM" -lt 2 ; then
	echo "Invalid number of NUMA nodes ($NUMA_NUM) too small"
	exit 1
    fi
    if test "$NUMA_NUM" -gt "$NR_CPU" ; then
	echo "Can't have more NUMA nodes than CPUs"
	exit 1
    fi
    NUMA="-numa node"
    for i in $(seq 2 "$NUMA_NUM") ; do
	NUMA="$NUMA -numa node"
    done
fi

if test -z "$NO_VIRTIO_RNG" ; then
    VIRTIO_RNG="-object rng-random,filename=/dev/urandom,id=rng0 \
	-device virtio-rng-pci,rng=rng0"
fi

ARG="$ARG fstesttyp=$PRIMARY_FSTYPE fstestapi=$API"
