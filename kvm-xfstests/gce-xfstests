#!/bin/bash

GCE_XFSTESTS=yes
DIR=.
if test -n "$GCE_XFSTESTS_DIR"
then
    DIR="$GCE_XFSTESTS_DIR"
fi

. "$DIR/util/get-config"

# Use different defaults for GCE because the background ruby monitoring
# program uses extra memory --- the n1-standard-2 machine type has 7.5 GB,
# so use that.
NR_CPU=2
MEM=7680

# We use ROOT_FS for the GCE image; this can be set by the -I option
ROOT_FS="xfstests"

if test -r "$DIR/test-appliance/config.custom" ; then
   . "$DIR/test-appliance/config.custom"
fi

if test -z "$GS_BUCKET" -o -z "$GCE_PROJECT" -o -z "$GCE_ZONE"
then
	echo "You must configure GS_BUCKET, GCE_PROJECT, and GCE_ZONE in"
	echo "your config file"
	exit 1
fi

QUIET="quiet loglevel=0"
which pigz &>/dev/null && GZIP=pigz || GZIP=gzip

get_local_hash()
{
    LOCAL_HASH=$(gsutil hash "$1" 2> /dev/null | grep "Hash (md5)" \
			| awk '{print $3}')
}

get_remote_hash()
{
    REMOTE_HASH=$(gsutil stat "$1" 2> /dev/null | grep "Hash (md5)" \
			 | awk '{print $3}')
}

do_get_results_uri()
{
    case "$1" in
	gs://*)
	    URI="$1"
	    ;;
	results*)
	    URI="gs://$GS_BUCKET/$1"
	    ;;
	[0-9]*)
	    URI=$(gsutil ls "gs://$GS_BUCKET/results.$1.*.tar.xz" \
			 2>/dev/null)
	    if test -z "$URI"
	    then
		echo "No results found with datecode: $1"
		exit 1
	    fi
	    ;;
    esac
}

do_get_results()
{
    do_get_results_uri "$1"
    TARBALL=/tmp/$(basename "$URI")
    if test -n "$do_checksum"
    then
	get_local_hash "$TARBALL"
	get_remote_hash "$URI"
	if test "$LOCAL_HASH" != "$REMOTE_HASH"
	then
	    gsutil cp "$URI" "$TARBALL" 2> /dev/null
	fi
    else
	if ! test -f "$TARBALL"
	then
	    gsutil cp "$URI" "$TARBALL" 2> /dev/null
	fi
    fi
    if ! test -f "$TARBALL"
    then
	echo "Couldn't download $TARBALL from $URI"
	return 1
    fi
    if test -n "$do_unpack"
    then
	DIRNAME=/tmp/$(basename "$URI" | sed -e 's/\(results.[0-9]*\).*/\1/' -e s'/\./-/')
	/bin/rm -rf "$DIRNAME" 2> /dev/null
	mkdir -p "$DIRNAME"
	xzcat < "$TARBALL" | tar -C "$DIRNAME" -xf -
	echo "Unpacked results at $DIRNAME"
	return 0
    fi
    if test -n "$get_syslog"
    then
	xzcat < "$TARBALL" | tar -Oxf - ./syslog
    elif test -n "$do_summary"
    then
	xzcat < "$TARBALL" | tar -Oxf - ./runtests.log | \
	    "$DIR/get-results" "$do_summary" -
    else
	xzcat < "$TARBALL" | tar -Oxf - ./runtests.log
    fi
}

case "$1" in
    ls|ls-instances)
	if test "$2" = "--gce"
	then
	   gcloud compute --project "$GCE_PROJECT" instances list \
		  --regexp ^xfstests.*
	   exit 0
	fi
	l=$(gcloud compute --project "$GCE_PROJECT" instances list \
		--regexp ^xfstests.* --format=json | jq ".[].name" | \
		   sed -e 's/^"//' -e 's/"$//')
	if test "$2" != "-l"
	then
	    for i in $l
	    do
		echo "$i"
	    done
	    exit 0
	fi
	inst_info=$(mktemp)
	for i in $l
	do
	    gcloud compute --project "$GCE_PROJECT" instances describe \
			--zone "$GCE_ZONE" "$i" --format=json > "$inst_info"
	    kver=$(jq < "$inst_info" \
		'.metadata.items[] | select(.key == "kernel_version") | .value' | \
			sed -e 's/^"//' -e 's/"$//' \
			    -e 's/^Linux xfstests-[0-9]* //' -e 's/ .*//')
	    status=$(jq < "$inst_info" \
		'.metadata.items[] | select(.key == "status") | .value' | \
			    sed -e 's/^"//' -e 's/"$//')
	    ip=$(jq < "$inst_info" \
		    '.networkInterfaces[] | .accessConfigs[] | select(.name == "external-nat") | .natIP' | \
			sed -e 's/^"//' -e 's/"$//')
	    echo "$i $ip - $kver - $status"
	done
	rm "$inst_info"
	exit 0
	;;
    rm|rm-instances|abort|abort-instances)
	if ! gcloud compute --project "$GCE_PROJECT" -q instances \
	     describe "$2" --zone "$GCE_ZONE" > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	if test "$1" = "abort"
	then
	    deldisks="--delete-disks all"
	fi
	shift
	for i in "$@"
	do
	    if test -n "$deldisks"
	    then
		reason="abort"
	    else
		reason="manual stop"
	    fi
	    gcloud compute --project "$GCE_PROJECT" -q instances \
		   add-metadata "$i" --metadata "shutdown_reason=$reason" \
		   --zone "$GCE_ZONE" > /dev/null
	    gcloud compute --project "$GCE_PROJECT" -q instances delete "$i" \
		   --zone "$GCE_ZONE" $deldisks &
	done
	exit 0
	;;
    start|start-instance|start-instances)
	if ! gcloud compute --project "$GCE_PROJECT" -q instances \
	     describe "$2" --zone "$GCE_ZONE" > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	shift
	for i in "$@"
	do
	    gcloud compute --project "$GCE_PROJECT" -q instances start "$i" \
		   --zone "$GCE_ZONE" &
	done
	exit 0
	;;
    stop|stop-instance|stop-instances)
	if ! gcloud compute --project "$GCE_PROJECT" -q instances \
	     describe "$2" --zone "$GCE_ZONE" > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	shift
	for i in "$@"
	do
	    gcloud compute --project "$GCE_PROJECT" -q instances stop "$i" \
		   --zone "$GCE_ZONE" &
	done
	exit 0
	;;
    ls-disks|ls-disk)
	gcloud compute --project "$GCE_PROJECT" disks list \
	       --regexp ^xfstests.*
	exit 0
	;;
    rm-disks|rm-disk)
	shift
	gcloud compute --project "$GCE_PROJECT" disks delete "$@"
	exit 0
	;;
    ls-results|ls-gcs)
	if test "$1" = "ls-gcs"
	then
	    do_all=yes
	fi
	shift
	for i in "$@"
	do
	    case $i in
		--all|-a)
		    do_all=yes
		    ;;
		-*)
		    opt="$opt $i"
		    ;;
		*)
		    arg="$arg gs://$GS_BUCKET/$i"
		    ;;
	    esac
	done
	if test -z "$arg"
	then
	    if test -n "$do_all"
	    then
		arg="gs://$GS_BUCKET"
	    else
		arg="gs://$GS_BUCKET/results.*"
	    fi
	fi
	gsutil ls $opt "$arg"
	exit 0
	;;
    rm-results|rm-gcs)
	shift
	for i in "$@"
	do
	    do_get_results_uri "$i"
	    gsutil rm "$URI"
	done
	exit 0
	;;
    get-results)
	shift
	for i in "$@"
	do
	    case $i in
		--checksum|-c)
		    do_checksum=yes
		    ;;
		--syslog)
		    get_syslog=yes
		    ;;
		--unpack)
		    do_unpack=yes
		    ;;
		--summary|-s)
		    do_summary="-s"
		    ;;
		--failures|-F)
		    do_summary="-F"
		    ;;
		*)
		    do_get_results "$i"
	    esac
	done
	exit 0
	;;
    setup)
	"$DIR/util/gce-do-setup"
	exit $?
	;;
    ssh)
	if ! gcloud compute --project "$GCE_PROJECT" -q instances \
	     describe "$2" --zone "$GCE_ZONE" > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	gcloud compute --project "$GCE_PROJECT" -q ssh root@"$2" \
	       --zone "$GCE_ZONE"
	exit 0
	;;
    console)
	gcloud compute --project "$GCE_PROJECT" -q instances \
	       get-serial-port-output "$2" --zone "$GCE_ZONE"
	exit 0
	;;
    serial)
	if test "$2" == "--port"
	then
	    shift
	    PORT="--port $2"
	    shift
	fi
	exec gcloud beta compute --project "$GCE_PROJECT" -q \
	     connect-to-serial-port --zone "$GCE_ZONE" $PORT "$2"
	;;
    get-results)
	case "$2" in
	    --failures|-F)
		OPT="-F"
		shift
		;;
	esac
	tmpfile=$(mktemp)
	gcloud compute --project "$GCE_PROJECT" -q \
	       copy-files "$2:/results/runtests.log" "$tmpfile" \
	       --zone "$GCE_ZONE"
	"$DIR/get-results" "$OPT" "$tmpfile"
	/bin/rm -f "$tmpfile"
	exit 0
	;;
    create-image)
	shift
	"$DIR/test-appliance/gce-create-image" "$@"
	exit $?
	;;
    export-image)
	shift
	"$DIR/test-appliance/gce-export-image" "$@"
	exit $?
	;;
    import-image)
	shift
	"$DIR/test-appliance/gce-import-image" "$@"
	exit $?
	;;
esac

ORIG_CMDLINE="$*"

. "$DIR/util/parse_cli"

if test -n "$EXTRA_ARG"
then
    ARG="$ARG kopt=$EXTRA_ARG"
fi

if test "$ROOT_FS" = "xfstests" ;
then
    IMAGE_FLAG="--image-family"
else
    IMAGE_FLAG="--image"
fi

GS_RW=https://www.googleapis.com/auth/devstorage.read_write
GS_RO=https://www.googleapis.com/auth/devstorage.read_only
LOG_WR=https://www.googleapis.com/auth/logging.write
COMPUTE_RW=https://www.googleapis.com/auth/compute

SCOPES="$GS_RW,$COMPUTE_RW,$LOG_WR"

DATECODE=$(date +%Y%m%d%H%M)
INSTANCE="xfstests-$DATECODE"

case "$ARG" in
    cmd=maint*)
	INSTANCE="xfstests"
	;;
esac

if test -n "$INSTANCE_NAME"
then
    INSTANCE="$INSTANCE_NAME"
fi

case "$OVERRIDE_KERNEL" in
    gs://*)
	GS_KERNEL="$OVERRIDE_KERNEL"
	GCE_KERNEL=""
	;;
    //*)
	GS_KERNEL=$(echo "$OVERRIDE_KERNEL" | sed -e "s;//;gs://$GS_BUCKET/;")
	GCE_KERNEL=""
	;;
    none)
	GS_KERNEL=""
	GCE_KERNEL=""
	;;
    "")
	GS_KERNEL=gs://$GS_BUCKET/bzImage
	if test -z "$GCE_KERNEL"
	then
	    GCE_KERNEL=$KERNEL
	fi
	;;
    *)
	GCE_KERNEL=$OVERRIDE_KERNEL
	GS_KERNEL=gs://$GS_BUCKET/bzImage-$DATECODE-onetime
	;;
esac

if test -z "$NO_ACTION" -a -n "$GCE_KERNEL"
then
    if ! test -f "$GCE_KERNEL"
    then
	echo "Can't find kernel at $GCE_KERNEL"
	exit 1
    fi
    get_local_hash "$GCE_KERNEL"
    get_remote_hash "$GS_KERNEL"
    if test "$LOCAL_HASH" != "$REMOTE_HASH"
    then
	gsutil cp "$GCE_KERNEL" "$GS_KERNEL"
    fi
fi

if test -z "$NO_ACTION" -a -n "$GCE_HOOKS"
then
    if ! test -e "$GCE_HOOKS"
    then
	echo "Can't find hooks file to upload at $GCE_HOOKS"
	exit 1
    fi
    if test -d "$GCE_HOOKS"
    then
	tmpfile=$(mktemp)
	tar -C "$GCE_HOOKS" -cf - . | $GZIP -9n > "$tmpfile"
	GCE_HOOKS=$tmpfile
	GS_HOOKS=gs://$GS_BUCKET/hooks.tar.gz
    else
	GS_HOOKS=gs://$GS_BUCKET/$(basename "$GCE_HOOKS")
    fi
    get_local_hash "$GCE_HOOKS"
    get_remote_hash "$GS_HOOKS"
    if test "$LOCAL_HASH" != "$REMOTE_HASH"
    then
	gsutil cp "$GCE_HOOKS" "$GS_HOOKS"
    fi
    if test -n "$tmpfile"
    then
       /bin/rm -f "$tmpfile"
       unset tmpfile
    fi
    ARG="$ARG hooks=$GS_HOOKS"
fi

if test -z "$NO_ACTION" -a "$UPDATE_XFSTESTS" = "yes"
then
    LOCAL_XFSTESTS="$DIR/../xfstests.tar.gz"
    GS_XFSTESTS="gs://$GS_BUCKET/xfstests.tar.gz"
    get_local_hash "$LOCAL_XFSTESTS"
    get_remote_hash "$GS_XFSTESTS"
    if test "$LOCAL_HASH" != "$REMOTE_HASH"
    then
	gsutil cp "$LOCAL_XFSTESTS" "$GS_XFSTESTS"
    fi
    ARG="$ARG tarxfstests=$GS_XFSTESTS"
fi

if test -z "$NO_ACTION" -a "$UPDATE_FILES" = "yes"
then
    LOCAL_FILES=$(mktemp /tmp/files.XXXXXXXX)
    GS_FILES="gs://$GS_BUCKET/files.tar.gz"
    if ! test -d "$DIR/test-appliance"
    then
	echo "Can't find the test-appliance directory!"
	exit 1
    fi
    (cd "$DIR/test-appliance"; \
     tar -X gce-exclude-files -C files -cf - . | $GZIP -9n > $LOCAL_FILES)
    get_local_hash "$LOCAL_FILES"
    get_remote_hash "$GS_FILES"
    if test "$LOCAL_HASH" != "$REMOTE_HASH"
    then
	gsutil cp "$LOCAL_FILES" "$GS_FILES"
    fi
    ARG="$ARG tarfiles=$GS_FILES"
    rm -f "$LOCAL_FILES"
fi

if test -n "$GS_KERNEL"
then
    ARG="$ARG kexec=$GS_KERNEL"
fi

# MT_PRICE is in millidollars, as of 9/7/2015
function get_machtype_stats() {
    case "$GCE_MACHTYPE" in
	f1-micro)	MT_PRICE=0008	; MT_CPU=1  ; MT_RAM=614 ;;
	g1-micro)	MT_PRICE=0027	; MT_CPU=1  ; MT_RAM=1740 ;;
	n1-standard-1)	MT_PRICE=0050	; MT_CPU=1  ; MT_RAM=3840 ;;
	n1-standard-2)	MT_PRICE=0100	; MT_CPU=2  ; MT_RAM=7680 ;;
	n1-highmem-2)	MT_PRICE=0126	; MT_CPU=2  ; MT_RAM=13312 ;;
	n1-highcpu-2)	MT_PRICE=0076	; MT_CPU=2  ; MT_RAM=1843 ;;
	n1-standard-4)	MT_PRICE=0200	; MT_CPU=4  ; MT_RAM=15360 ;;
	n1-highmem-4)	MT_PRICE=0252	; MT_CPU=4  ; MT_RAM=26624 ;;
	n1-highcpu-4)	MT_PRICE=0152	; MT_CPU=4  ; MT_RAM=3686 ;;
	n1-standard-8)	MT_PRICE=0400	; MT_CPU=8  ; MT_RAM=30720 ;;
	n1-highmem-8)	MT_PRICE=0504	; MT_CPU=8  ; MT_RAM=53248 ;;
	n1-highcpu-8)	MT_PRICE=0304	; MT_CPU=8  ; MT_RAM=7372 ;;
	n1-standard-16)	MT_PRICE=0800	; MT_CPU=16  ; MT_RAM=61440 ;;
	n1-highmem-16)	MT_PRICE=1008	; MT_CPU=16  ; MT_RAM=106496 ;;
	n1-highcpu-16)	MT_PRICE=0608	; MT_CPU=16  ; MT_RAM=14745 ;;
	n1-standard-32)	MT_PRICE=1600	; MT_CPU=32  ; MT_RAM=122880 ;;
	n1-highmem-32)	MT_PRICE=2016	; MT_CPU=32  ; MT_RAM=212992 ;;
	n1-highcpu-32)	MT_PRICE=1216	; MT_CPU=32  ; MT_RAM=29491 ;;
    esac
}

# Find what will hopefully be the cheapest MACHTYPE that satisifies
# the requested number of CPU's and memory.  The algorithm isn't fully
# general but it works with the current price schedule, and it's
# simple to implement in a shell script.  If this were LISP we would
# be filtering on a sorted list using something like remove-if, but
# this is good enough for what we need.
#
function fit_machtype_resources() {
    local TRY_TYPE=highcpu
    local TRY_CPU=2

    if test $NR_CPU -eq 1
    then
	GCE_MACHTYPE="n1-standard-1"
	get_machtype_stats
	# echo Trying $GCE_MACHTYPE with $MT_RAM ram and price $MT_PRICE
	if test "$MT_RAM" -ge "$MEM"
	then
	    return
	fi
    fi
    if test $NR_CPU -gt 16 ; then TRY_CPU=32
    elif test $NR_CPU -gt 8 ; then TRY_CPU=16
    elif test $NR_CPU -gt 4 ; then TRY_CPU=8
    elif test $NR_CPU -gt 2 ; then TRY_CPU=4
    elif test $NR_CPU -gt 1 ; then TRY_CPU=2
    fi

    while /bin/true
    do
	GCE_MACHTYPE=n1-$TRY_TYPE-$TRY_CPU
	get_machtype_stats
	# echo Trying $GCE_MACHTYPE with $MT_RAM ram and price $MT_PRICE
	if test "$MT_RAM" -ge "$MEM" ; then return ; fi
	if test $TRY_TYPE = highcpu
	then
	    TRY_TYPE=standard
	elif test $TRY_TYPE = standard
	then
	    TRY_TYPE=highmem
	else
	    if test $TRY_CPU -ge 32 ; then return ; fi
	    TRY_TYPE=highcpu
	    (( TRY_CPU = TRY_CPU * 2 ))
	fi
    done
}

if test -n "$GCE_MACHTYPE"
then
    get_machtype_stats
    if test -z "$EXPLICIT_RAM"
    then
	MT_RAM=0
    else
	if test $MEM -gt $MT_RAM
	then
	    echo "Warning: requested $MEM MB ram but only $MT_RAM available"
	fi
    fi
    if test -z "$EXPLICIT_CPU"
    then
	MT_CPU=0
    else
	if test $NR_CPU -gt $MT_CPU
	then
	    echo "Warning: requested $NR_CPU cpus but only $MT_CPU available"
	fi
    fi
else
    fit_machtype_resources
    if test $MEM -gt $MT_RAM
    then
	echo "Warning: requested $MEM MB ram but only $MT_RAM available"
    fi
fi

if test $MEM -lt $MT_RAM
then
    ARG="$ARG mem=$MEM"
fi

if test $NR_CPU -lt $MT_CPU
then
    ARG="$ARG nr_cpus=$NR_CPU"
fi

ARG="$ARG gs_bucket=$GS_BUCKET serial-port-enable=true"

# Don't print the sendgrid password
if test -n "$NO_ACTION" -a -n "$GCE_SG_PASS"
then
    GCE_SG_PASS=XXXXXXXX
fi
if test -n "$NO_ACTION" -a -n "$GCE_SG_API"
then
    GCE_SG_API=XXXXXXXX
fi

if test -n "$GCE_SG_USER" -a -n "$GCE_SG_PASS"
then
    ARG="$ARG sg_user=$GCE_SG_USER sg_pass=$GCE_SG_PASS"
fi

if test -n "$GCE_SG_API"
then
    ARG="$ARG sg_api=$GCE_SG_API"
fi

if test -n "$GCE_REPORT_SENDER"
then
    ARG="$ARG report_sender=$GCE_REPORT_SENDER"
fi

if test -n "$GCE_REPORT_EMAIL"
then
    ARG="$ARG report_email=$GCE_REPORT_EMAIL"
fi

ARG="$ARG orig_cmdline=$(echo " $ORIG_CMDLINE" | sed -e 's/^ //' | base64 -w 0)"

if test -n "$DO_LOCAL_SSD"
then
    SSD_ARG="--local-ssd interface=SCSI"
fi

echo "Launching $INSTANCE using $GCE_MACHTYPE..."
# echo "Using ARG: $ARG"

$NO_ACTION gcloud compute --project "$GCE_PROJECT" \
       instances create "$INSTANCE" --zone "$GCE_ZONE" \
       --machine-type "$GCE_MACHTYPE" --network "default" \
       $SSD_ARG --maintenance-policy "MIGRATE" \
       --scopes "$SCOPES" \
       --metadata "^ ^$ARG" \
       --tags http-server \
       --image-project "${GCE_IMAGE_PROJECT:-xfstests-cloud}" \
       "$IMAGE_FLAG" "$ROOT_FS"

case "$ARG" in
    cmd=maint*)
	if test -z "$NO_ACTION"
	then
	    sleep 1
	    if test "$OVERRIDE_KERNEL" != none
	    then
		# Need to give more time for the kexec
		sleep 30
	    fi
	fi
	$NO_ACTION gcloud compute --project "$GCE_PROJECT" ssh "root@$INSTANCE"
	;;
esac
